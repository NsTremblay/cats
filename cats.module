<?php

/**
 * @file
 *   My cool cats Angular App module
 */

/**
 * Implements hook_menu().
 */
function cats_menu() {
  $items['cats'] = array(
    'title' => 'All cats',
    'page callback' => 'cats_page',
    'access arguments' => array('access content'),
  );

  $items['json/custom-api/cats'] = array(
    'title' => 'All cats',
    'page callback' => 'cats_json_endpoint_page',
    'access arguments' => array('access content')
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function cats_theme() {
  return array(
    'all_cats' => array(
      'template' => 'all-cats',
    ),
  );
}

/**
 * Cats page callback
 */
function cats_page() {
  // Set the path
  $path = drupal_get_path('module', 'cats');

  // Load angular
  drupal_add_library('angularjs', 'angularjs');

  // Load the app
  drupal_add_js($path . '/js/cats.gen.js');

  drupal_add_css($path . '/css/bootstrap.css');

  // Return the HTML template
  return theme('all_cats');
}

/**
 * Page callback
 */
function cats_json_endpoint_page() {
  // Let a HTTP client now we are going to serve JSON
  header('Content-type: application/json');
  // Print JSON to screen.
  print json_encode(get_all_cats_json_array());
  // Halt Drupal execution. We don't need the theming layer to kick in here.
  exit();
}

/**
 * Fetch cats as JSON ready array
 */
function get_all_cats_json_array() {
  $cats = array();

  // Fetch the page & items_per_page parameters
  $page = $_GET['page'];
  $items_per_page = $_GET['items_per_page'];

  // Calculate the offset position within the result set. This is where the
  // 'slice' of results for the current page will be calculated from.
  $offset = ($page - 1) * $items_per_page;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'cat')
    ->propertyCondition('status', 1)
    ->range($offset, $items_per_page);

  // Fetch the cats
  $result = $query->execute();

  $json_cats = array();
  if (isset($result['node'])) {
    // We also need the total number of *all* cats for pagination. We only
    // retrieve this if we have queried a non-empty result set.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'cat')
      ->propertyCondition('status', 1)
      ->count();

    $count = $query->execute();

    $cats_nids = array_keys($result['node']);
    $cats = entity_load('node', $cats_nids);

    // Let's build the array of cats we are going to json-ify.
    // Should be something like this:
    //
    //  $cats['nodes'] = array(
    //    'node' => array(
    //      'title' => 'Russian blue',
    //      'Body' => 'lorem ipsum',
    //      'Image' => 'http://to-jpg',
    //    ),
    //  );
    //
    foreach ($cats as $cat) {
      // We use Entity API's entity_metadata_wrapper.
      $cat_wrapper = entity_metadata_wrapper('node', $cat);

      $body = $cat_wrapper->body->value();
      $image = $cat_wrapper->field_cat_image->value();

      $json_cats['nodes'][] = array(
        'node' => array(
          'title' => $cat->title,
          'Body' => $body['value'],
          'Image' => image_style_url('medium', $image['uri']),
         ),
      );
      $total++;
    }

    // Set the $cats[total] value with the total number of cats from the entire
    // result set.
    $json_cats['total'] = $count;
  }

  return $json_cats;
}
